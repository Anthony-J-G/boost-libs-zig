const std = @import("std");
const constants = @import("../constants.zig");
const cxxFlags = constants.cxxFlags;


fn addLibraryToConfig(b: *std.Build, obj: *std.Build.Step.Compile) void {
    const urlPath = b.dependency("url", .{}).path("src");
    obj.addCSourceFiles(.{
        .root = urlPath,
        .files = &.{
			"authority_view.cpp",
			"decode_view.cpp",
			"encoding_opts.cpp",
			"error.cpp",
			"ipv4_address.cpp",
			"ipv6_address.cpp",
			"params_base.cpp",
			"params_encoded_base.cpp",
			"params_encoded_ref.cpp",
			"params_encoded_view.cpp",
			"params_ref.cpp",
			"params_view.cpp",
			"parse.cpp",
			"parse_path.cpp",
			"parse_query.cpp",
			"pct_string_view.cpp",
			"scheme.cpp",
			"segments_base.cpp",
			"segments_encoded_base.cpp",
			"segments_encoded_ref.cpp",
			"segments_encoded_view.cpp",
			"segments_ref.cpp",
			"segments_view.cpp",
			"static_url.cpp",
			"url.cpp",
			"url_base.cpp",
			"url_view.cpp",
			"url_view_base.cpp",
			"any_params_iter.cpp",
			"any_segments_iter.cpp",
			"decode.cpp",
			"except.cpp",
			"format_args.cpp",
			"normalize.cpp",
			"params_iter_impl.cpp",
			"pattern.cpp",
			"pct_format.cpp",
			"replacement_field_rule.cpp",
			"segments_iter_impl.cpp",
			"url_impl.cpp",
			"vformat.cpp",
			"ci_string.cpp",
			"dec_octet_rule.cpp",
			"delim_rule.cpp",
			"error.cpp",
			"literal_rule.cpp",
			"string_view_base.cpp",
			"recycled.cpp",
			"absolute_uri_rule.cpp",
			"authority_rule.cpp",
			"ipv4_address_rule.cpp",
			"ipv6_address_rule.cpp",
			"origin_form_rule.cpp",
			"query_rule.cpp",
			"relative_ref_rule.cpp",
			"uri_reference_rule.cpp",
			"uri_rule.cpp",
			"h16_rule.cpp",
			"hier_part_rule.cpp",
			"host_rule.cpp",
			"ipv6_addrz_rule.cpp",
			"ipvfuture_rule.cpp",
			"ip_literal_rule.cpp",
			"port_rule.cpp",
			"relative_part_rule.cpp",
			"scheme_rule.cpp",
			"userinfo_rule.cpp"
        },
        .flags = cxxFlags,
    });
}
