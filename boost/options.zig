const std = @import("std");
    
    pub const Options = struct {
        // General Build Options
        shared: bool = false,
        config: []const u8 = &.{},
        
		// Boost Add Library by Category (https://www.boost.org/doc/libs/1_86_0/?view=categorized)
		boost_category_string: bool = false,
		boost_category_containers: bool = false,
		boost_category_iterators: bool = false,
		boost_category_algorithms: bool = false,
		boost_category_function_objects: bool = false,
		boost_category_generic: bool = false,
		boost_category_metaprogramming: bool = false,
		boost_category_preprocessor: bool = false,
		boost_category_concurrent: bool = false,
		boost_category_math: bool = false,
		boost_category_correctness: bool = false,
		boost_category_error_handling: bool = false,
		boost_category_data: bool = false,
		boost_category_domain: bool = false,
		boost_category_image_processing: bool = false,
		boost_category_io: bool = false,
		boost_category_inter_language: bool = false,
		boost_category_emulation: bool = false,
		boost_category_memory: bool = false,
		boost_category_parsing: bool = false,
		boost_category_patterns: bool = false,
		boost_category_programming: bool = false,
		boost_category_state: bool = false,
		boost_category_system: bool = false,
		boost_category_miscellaneous: bool = false,
		boost_category_workarounds: bool = false,

        // Libraries to Add (Overrides category definitions)
		boost_accumulators: bool = true,
		boost_algorithm: bool = true,
		boost_align: bool = true,
		boost_any: bool = true,
		boost_array: bool = true,
		boost_asio: bool = true,
		boost_assert: bool = true,
		boost_assign: bool = true,
		boost_atomic: bool = true,
		boost_beast: bool = true,
		boost_bimap: bool = true,
		boost_bind: bool = true,
		boost_callable_traits: bool = true,
		boost_charconv: bool = true,
		boost_chrono: bool = true,
		boost_circular_buffer: bool = true,
		boost_cobalt: bool = true,
		boost_compat: bool = true,
		boost_compatibility: bool = true,
		boost_compute: bool = true,
		boost_concept_check: bool = true,
		boost_config: bool = true,
		boost_container: bool = true,
		boost_container_hash: bool = true,
		boost_context: bool = true,
		boost_contract: bool = true,
		boost_conversion: bool = true,
		boost_convert: bool = true,
		boost_core: bool = true,
		boost_coroutine: bool = true,
		boost_coroutine2: bool = true,
		boost_crc: bool = true,
		boost_date_time: bool = true,
		boost_describe: bool = true,
		boost_detail: bool = true,
		boost_dll: bool = true,
		boost_dynamic_bitset: bool = true,
		boost_endian: bool = true,
		boost_exception: bool = true,
		boost_fiber: bool = true,
		boost_filesystem: bool = true,
		boost_flyweight: bool = true,
		boost_foreach: bool = true,
		boost_format: bool = true,
		boost_function: bool = true,
		boost_functional: bool = true,
		boost_function_types: bool = true,
		boost_fusion: bool = true,
		boost_geometry: bool = true,
		boost_gil: bool = true,
		boost_graph: bool = true,
		boost_graph_parallel: bool = true,
		boost_hana: bool = true,
		boost_headers: bool = true,
		boost_heap: bool = true,
		boost_histogram: bool = true,
		boost_hof: bool = true,
		boost_icl: bool = true,
		boost_integer: bool = true,
		boost_interprocess: bool = true,
		boost_intrusive: bool = true,
		boost_io: bool = true,
		boost_iostreams: bool = true,
		boost_iterator: bool = true,
		boost_json: bool = true,
		boost_lambda: bool = true,
		boost_lambda2: bool = true,
		boost_leaf: bool = true,
		boost_lexical_cast: bool = true,
		boost_locale: bool = true,
		boost_local_function: bool = true,
		boost_lockfree: bool = true,
		boost_log: bool = true,
		boost_logic: bool = true,
		boost_math: bool = true,
		boost_metaparse: bool = true,
		boost_move: bool = true,
		boost_mp11: bool = true,
		boost_mpi: bool = true,
		boost_mpl: bool = true,
		boost_msm: bool = true,
		boost_multiprecision: bool = true,
		boost_multi_array: bool = true,
		boost_multi_index: bool = true,
		boost_mysql: bool = true,
		boost_nowide: bool = true,
		boost_numeric: bool = true,
		boost_optional: bool = true,
		boost_outcome: bool = true,
		boost_parameter: bool = true,
		boost_parameter_python: bool = true,
		boost_parser: bool = true,
		boost_pfr: bool = true,
		boost_phoenix: bool = true,
		boost_polygon: bool = true,
		boost_poly_collection: bool = true,
		boost_pool: bool = true,
		boost_predef: bool = true,
		boost_preprocessor: bool = true,
		boost_process: bool = true,
		boost_program_options: bool = true,
		boost_property_map: bool = true,
		boost_property_map_parallel: bool = true,
		boost_property_tree: bool = true,
		boost_proto: bool = true,
		boost_ptr_container: bool = true,
		boost_python: bool = true,
		boost_qvm: bool = true,
		boost_random: bool = true,
		boost_range: bool = true,
		boost_ratio: bool = true,
		boost_rational: bool = true,
		boost_redis: bool = true,
		boost_regex: bool = true,
		boost_safe_numerics: bool = true,
		boost_scope: bool = true,
		boost_scope_exit: bool = true,
		boost_serialization: bool = true,
		boost_signals2: bool = true,
		boost_smart_ptr: bool = true,
		boost_sort: bool = true,
		boost_spirit: bool = true,
		boost_stacktrace: bool = true,
		boost_statechart: bool = true,
		boost_static_assert: bool = true,
		boost_static_string: bool = true,
		boost_stl_interfaces: bool = true,
		boost_system: bool = true,
		boost_test: bool = true,
		boost_thread: bool = true,
		boost_throw_exception: bool = true,
		boost_timer: bool = true,
		boost_tokenizer: bool = true,
		boost_tti: bool = true,
		boost_tuple: bool = true,
		boost_typeof: bool = true,
		boost_type_erasure: bool = true,
		boost_type_index: bool = true,
		boost_type_traits: bool = true,
		boost_units: bool = true,
		boost_unordered: bool = true,
		boost_url: bool = true,
		boost_utility: bool = true,
		boost_uuid: bool = true,
		boost_variant: bool = true,
		boost_variant2: bool = true,
		boost_vmd: bool = true,
		boost_wave: bool = true,
		boost_winapi: bool = true,
		boost_xpressive: bool = true,
		boost_yap: bool = true,


        const defaults = Options{};

        pub fn getOptions(b: *std.Build) Options {
            return .{
                .shared = b.option(bool, "shared", "Compile as shared library") orelse defaults.shared,        
                .config = b.option([]const u8, "config", "Compile with custom define macros overriding config.h") orelse &.{},

				.boost_accumulators = b.option(bool, "boost_accumulators", "Compile with accumulators support") orelse defaults.boost_accumulators,
				.boost_algorithm = b.option(bool, "boost_algorithm", "Compile with algorithm support") orelse defaults.boost_algorithm,
				.boost_align = b.option(bool, "boost_align", "Compile with align support") orelse defaults.boost_align,
				.boost_any = b.option(bool, "boost_any", "Compile with any support") orelse defaults.boost_any,
				.boost_array = b.option(bool, "boost_array", "Compile with array support") orelse defaults.boost_array,
				.boost_asio = b.option(bool, "boost_asio", "Compile with asio support") orelse defaults.boost_asio,
				.boost_assert = b.option(bool, "boost_assert", "Compile with assert support") orelse defaults.boost_assert,
				.boost_assign = b.option(bool, "boost_assign", "Compile with assign support") orelse defaults.boost_assign,
				.boost_atomic = b.option(bool, "boost_atomic", "Compile with atomic support") orelse defaults.boost_atomic,
				.boost_beast = b.option(bool, "boost_beast", "Compile with beast support") orelse defaults.boost_beast,
				.boost_bimap = b.option(bool, "boost_bimap", "Compile with bimap support") orelse defaults.boost_bimap,
				.boost_bind = b.option(bool, "boost_bind", "Compile with bind support") orelse defaults.boost_bind,
				.boost_callable_traits = b.option(bool, "boost_callable_traits", "Compile with callable_traits support") orelse defaults.boost_callable_traits,
				.boost_charconv = b.option(bool, "boost_charconv", "Compile with charconv support") orelse defaults.boost_charconv,
				.boost_chrono = b.option(bool, "boost_chrono", "Compile with chrono support") orelse defaults.boost_chrono,
				.boost_circular_buffer = b.option(bool, "boost_circular_buffer", "Compile with circular_buffer support") orelse defaults.boost_circular_buffer,
				.boost_cobalt = b.option(bool, "boost_cobalt", "Compile with cobalt support") orelse defaults.boost_cobalt,
				.boost_compat = b.option(bool, "boost_compat", "Compile with compat support") orelse defaults.boost_compat,
				.boost_compatibility = b.option(bool, "boost_compatibility", "Compile with compatibility support") orelse defaults.boost_compatibility,
				.boost_compute = b.option(bool, "boost_compute", "Compile with compute support") orelse defaults.boost_compute,
				.boost_concept_check = b.option(bool, "boost_concept_check", "Compile with concept_check support") orelse defaults.boost_concept_check,
				.boost_config = b.option(bool, "boost_config", "Compile with config support") orelse defaults.boost_config,
				.boost_container = b.option(bool, "boost_container", "Compile with container support") orelse defaults.boost_container,
				.boost_container_hash = b.option(bool, "boost_container_hash", "Compile with container_hash support") orelse defaults.boost_container_hash,
				.boost_context = b.option(bool, "boost_context", "Compile with context support") orelse defaults.boost_context,
				.boost_contract = b.option(bool, "boost_contract", "Compile with contract support") orelse defaults.boost_contract,
				.boost_conversion = b.option(bool, "boost_conversion", "Compile with conversion support") orelse defaults.boost_conversion,
				.boost_convert = b.option(bool, "boost_convert", "Compile with convert support") orelse defaults.boost_convert,
				.boost_core = b.option(bool, "boost_core", "Compile with core support") orelse defaults.boost_core,
				.boost_coroutine = b.option(bool, "boost_coroutine", "Compile with coroutine support") orelse defaults.boost_coroutine,
				.boost_coroutine2 = b.option(bool, "boost_coroutine2", "Compile with coroutine2 support") orelse defaults.boost_coroutine2,
				.boost_crc = b.option(bool, "boost_crc", "Compile with crc support") orelse defaults.boost_crc,
				.boost_date_time = b.option(bool, "boost_date_time", "Compile with date_time support") orelse defaults.boost_date_time,
				.boost_describe = b.option(bool, "boost_describe", "Compile with describe support") orelse defaults.boost_describe,
				.boost_detail = b.option(bool, "boost_detail", "Compile with detail support") orelse defaults.boost_detail,
				.boost_dll = b.option(bool, "boost_dll", "Compile with dll support") orelse defaults.boost_dll,
				.boost_dynamic_bitset = b.option(bool, "boost_dynamic_bitset", "Compile with dynamic_bitset support") orelse defaults.boost_dynamic_bitset,
				.boost_endian = b.option(bool, "boost_endian", "Compile with endian support") orelse defaults.boost_endian,
				.boost_exception = b.option(bool, "boost_exception", "Compile with exception support") orelse defaults.boost_exception,
				.boost_fiber = b.option(bool, "boost_fiber", "Compile with fiber support") orelse defaults.boost_fiber,
				.boost_filesystem = b.option(bool, "boost_filesystem", "Compile with filesystem support") orelse defaults.boost_filesystem,
				.boost_flyweight = b.option(bool, "boost_flyweight", "Compile with flyweight support") orelse defaults.boost_flyweight,
				.boost_foreach = b.option(bool, "boost_foreach", "Compile with foreach support") orelse defaults.boost_foreach,
				.boost_format = b.option(bool, "boost_format", "Compile with format support") orelse defaults.boost_format,
				.boost_function = b.option(bool, "boost_function", "Compile with function support") orelse defaults.boost_function,
				.boost_functional = b.option(bool, "boost_functional", "Compile with functional support") orelse defaults.boost_functional,
				.boost_function_types = b.option(bool, "boost_function_types", "Compile with function_types support") orelse defaults.boost_function_types,
				.boost_fusion = b.option(bool, "boost_fusion", "Compile with fusion support") orelse defaults.boost_fusion,
				.boost_geometry = b.option(bool, "boost_geometry", "Compile with geometry support") orelse defaults.boost_geometry,
				.boost_gil = b.option(bool, "boost_gil", "Compile with gil support") orelse defaults.boost_gil,
				.boost_graph = b.option(bool, "boost_graph", "Compile with graph support") orelse defaults.boost_graph,
				.boost_graph_parallel = b.option(bool, "boost_graph_parallel", "Compile with graph_parallel support") orelse defaults.boost_graph_parallel,
				.boost_hana = b.option(bool, "boost_hana", "Compile with hana support") orelse defaults.boost_hana,
				.boost_headers = b.option(bool, "boost_headers", "Compile with headers support") orelse defaults.boost_headers,
				.boost_heap = b.option(bool, "boost_heap", "Compile with heap support") orelse defaults.boost_heap,
				.boost_histogram = b.option(bool, "boost_histogram", "Compile with histogram support") orelse defaults.boost_histogram,
				.boost_hof = b.option(bool, "boost_hof", "Compile with hof support") orelse defaults.boost_hof,
				.boost_icl = b.option(bool, "boost_icl", "Compile with icl support") orelse defaults.boost_icl,
				.boost_integer = b.option(bool, "boost_integer", "Compile with integer support") orelse defaults.boost_integer,
				.boost_interprocess = b.option(bool, "boost_interprocess", "Compile with interprocess support") orelse defaults.boost_interprocess,
				.boost_intrusive = b.option(bool, "boost_intrusive", "Compile with intrusive support") orelse defaults.boost_intrusive,
				.boost_io = b.option(bool, "boost_io", "Compile with io support") orelse defaults.boost_io,
				.boost_iostreams = b.option(bool, "boost_iostreams", "Compile with iostreams support") orelse defaults.boost_iostreams,
				.boost_iterator = b.option(bool, "boost_iterator", "Compile with iterator support") orelse defaults.boost_iterator,
				.boost_json = b.option(bool, "boost_json", "Compile with json support") orelse defaults.boost_json,
				.boost_lambda = b.option(bool, "boost_lambda", "Compile with lambda support") orelse defaults.boost_lambda,
				.boost_lambda2 = b.option(bool, "boost_lambda2", "Compile with lambda2 support") orelse defaults.boost_lambda2,
				.boost_leaf = b.option(bool, "boost_leaf", "Compile with leaf support") orelse defaults.boost_leaf,
				.boost_lexical_cast = b.option(bool, "boost_lexical_cast", "Compile with lexical_cast support") orelse defaults.boost_lexical_cast,
				.boost_locale = b.option(bool, "boost_locale", "Compile with locale support") orelse defaults.boost_locale,
				.boost_local_function = b.option(bool, "boost_local_function", "Compile with local_function support") orelse defaults.boost_local_function,
				.boost_lockfree = b.option(bool, "boost_lockfree", "Compile with lockfree support") orelse defaults.boost_lockfree,
				.boost_log = b.option(bool, "boost_log", "Compile with log support") orelse defaults.boost_log,
				.boost_logic = b.option(bool, "boost_logic", "Compile with logic support") orelse defaults.boost_logic,
				.boost_math = b.option(bool, "boost_math", "Compile with math support") orelse defaults.boost_math,
				.boost_metaparse = b.option(bool, "boost_metaparse", "Compile with metaparse support") orelse defaults.boost_metaparse,
				.boost_move = b.option(bool, "boost_move", "Compile with move support") orelse defaults.boost_move,
				.boost_mp11 = b.option(bool, "boost_mp11", "Compile with mp11 support") orelse defaults.boost_mp11,
				.boost_mpi = b.option(bool, "boost_mpi", "Compile with mpi support") orelse defaults.boost_mpi,
				.boost_mpl = b.option(bool, "boost_mpl", "Compile with mpl support") orelse defaults.boost_mpl,
				.boost_msm = b.option(bool, "boost_msm", "Compile with msm support") orelse defaults.boost_msm,
				.boost_multiprecision = b.option(bool, "boost_multiprecision", "Compile with multiprecision support") orelse defaults.boost_multiprecision,
				.boost_multi_array = b.option(bool, "boost_multi_array", "Compile with multi_array support") orelse defaults.boost_multi_array,
				.boost_multi_index = b.option(bool, "boost_multi_index", "Compile with multi_index support") orelse defaults.boost_multi_index,
				.boost_mysql = b.option(bool, "boost_mysql", "Compile with mysql support") orelse defaults.boost_mysql,
				.boost_nowide = b.option(bool, "boost_nowide", "Compile with nowide support") orelse defaults.boost_nowide,
				.boost_numeric = b.option(bool, "boost_numeric", "Compile with numeric support") orelse defaults.boost_numeric,
				.boost_optional = b.option(bool, "boost_optional", "Compile with optional support") orelse defaults.boost_optional,
				.boost_outcome = b.option(bool, "boost_outcome", "Compile with outcome support") orelse defaults.boost_outcome,
				.boost_parameter = b.option(bool, "boost_parameter", "Compile with parameter support") orelse defaults.boost_parameter,
				.boost_parameter_python = b.option(bool, "boost_parameter_python", "Compile with parameter_python support") orelse defaults.boost_parameter_python,
				.boost_parser = b.option(bool, "boost_parser", "Compile with parser support") orelse defaults.boost_parser,
				.boost_pfr = b.option(bool, "boost_pfr", "Compile with pfr support") orelse defaults.boost_pfr,
				.boost_phoenix = b.option(bool, "boost_phoenix", "Compile with phoenix support") orelse defaults.boost_phoenix,
				.boost_polygon = b.option(bool, "boost_polygon", "Compile with polygon support") orelse defaults.boost_polygon,
				.boost_poly_collection = b.option(bool, "boost_poly_collection", "Compile with poly_collection support") orelse defaults.boost_poly_collection,
				.boost_pool = b.option(bool, "boost_pool", "Compile with pool support") orelse defaults.boost_pool,
				.boost_predef = b.option(bool, "boost_predef", "Compile with predef support") orelse defaults.boost_predef,
				.boost_preprocessor = b.option(bool, "boost_preprocessor", "Compile with preprocessor support") orelse defaults.boost_preprocessor,
				.boost_process = b.option(bool, "boost_process", "Compile with process support") orelse defaults.boost_process,
				.boost_program_options = b.option(bool, "boost_program_options", "Compile with program_options support") orelse defaults.boost_program_options,
				.boost_property_map = b.option(bool, "boost_property_map", "Compile with property_map support") orelse defaults.boost_property_map,
				.boost_property_map_parallel = b.option(bool, "boost_property_map_parallel", "Compile with property_map_parallel support") orelse defaults.boost_property_map_parallel,
				.boost_property_tree = b.option(bool, "boost_property_tree", "Compile with property_tree support") orelse defaults.boost_property_tree,
				.boost_proto = b.option(bool, "boost_proto", "Compile with proto support") orelse defaults.boost_proto,
				.boost_ptr_container = b.option(bool, "boost_ptr_container", "Compile with ptr_container support") orelse defaults.boost_ptr_container,
				.boost_python = b.option(bool, "boost_python", "Compile with python support") orelse defaults.boost_python,
				.boost_qvm = b.option(bool, "boost_qvm", "Compile with qvm support") orelse defaults.boost_qvm,
				.boost_random = b.option(bool, "boost_random", "Compile with random support") orelse defaults.boost_random,
				.boost_range = b.option(bool, "boost_range", "Compile with range support") orelse defaults.boost_range,
				.boost_ratio = b.option(bool, "boost_ratio", "Compile with ratio support") orelse defaults.boost_ratio,
				.boost_rational = b.option(bool, "boost_rational", "Compile with rational support") orelse defaults.boost_rational,
				.boost_redis = b.option(bool, "boost_redis", "Compile with redis support") orelse defaults.boost_redis,
				.boost_regex = b.option(bool, "boost_regex", "Compile with regex support") orelse defaults.boost_regex,
				.boost_safe_numerics = b.option(bool, "boost_safe_numerics", "Compile with safe_numerics support") orelse defaults.boost_safe_numerics,
				.boost_scope = b.option(bool, "boost_scope", "Compile with scope support") orelse defaults.boost_scope,
				.boost_scope_exit = b.option(bool, "boost_scope_exit", "Compile with scope_exit support") orelse defaults.boost_scope_exit,
				.boost_serialization = b.option(bool, "boost_serialization", "Compile with serialization support") orelse defaults.boost_serialization,
				.boost_signals2 = b.option(bool, "boost_signals2", "Compile with signals2 support") orelse defaults.boost_signals2,
				.boost_smart_ptr = b.option(bool, "boost_smart_ptr", "Compile with smart_ptr support") orelse defaults.boost_smart_ptr,
				.boost_sort = b.option(bool, "boost_sort", "Compile with sort support") orelse defaults.boost_sort,
				.boost_spirit = b.option(bool, "boost_spirit", "Compile with spirit support") orelse defaults.boost_spirit,
				.boost_stacktrace = b.option(bool, "boost_stacktrace", "Compile with stacktrace support") orelse defaults.boost_stacktrace,
				.boost_statechart = b.option(bool, "boost_statechart", "Compile with statechart support") orelse defaults.boost_statechart,
				.boost_static_assert = b.option(bool, "boost_static_assert", "Compile with static_assert support") orelse defaults.boost_static_assert,
				.boost_static_string = b.option(bool, "boost_static_string", "Compile with static_string support") orelse defaults.boost_static_string,
				.boost_stl_interfaces = b.option(bool, "boost_stl_interfaces", "Compile with stl_interfaces support") orelse defaults.boost_stl_interfaces,
				.boost_system = b.option(bool, "boost_system", "Compile with system support") orelse defaults.boost_system,
				.boost_test = b.option(bool, "boost_test", "Compile with test support") orelse defaults.boost_test,
				.boost_thread = b.option(bool, "boost_thread", "Compile with thread support") orelse defaults.boost_thread,
				.boost_throw_exception = b.option(bool, "boost_throw_exception", "Compile with throw_exception support") orelse defaults.boost_throw_exception,
				.boost_timer = b.option(bool, "boost_timer", "Compile with timer support") orelse defaults.boost_timer,
				.boost_tokenizer = b.option(bool, "boost_tokenizer", "Compile with tokenizer support") orelse defaults.boost_tokenizer,
				.boost_tti = b.option(bool, "boost_tti", "Compile with tti support") orelse defaults.boost_tti,
				.boost_tuple = b.option(bool, "boost_tuple", "Compile with tuple support") orelse defaults.boost_tuple,
				.boost_typeof = b.option(bool, "boost_typeof", "Compile with typeof support") orelse defaults.boost_typeof,
				.boost_type_erasure = b.option(bool, "boost_type_erasure", "Compile with type_erasure support") orelse defaults.boost_type_erasure,
				.boost_type_index = b.option(bool, "boost_type_index", "Compile with type_index support") orelse defaults.boost_type_index,
				.boost_type_traits = b.option(bool, "boost_type_traits", "Compile with type_traits support") orelse defaults.boost_type_traits,
				.boost_units = b.option(bool, "boost_units", "Compile with units support") orelse defaults.boost_units,
				.boost_unordered = b.option(bool, "boost_unordered", "Compile with unordered support") orelse defaults.boost_unordered,
				.boost_url = b.option(bool, "boost_url", "Compile with url support") orelse defaults.boost_url,
				.boost_utility = b.option(bool, "boost_utility", "Compile with utility support") orelse defaults.boost_utility,
				.boost_uuid = b.option(bool, "boost_uuid", "Compile with uuid support") orelse defaults.boost_uuid,
				.boost_variant = b.option(bool, "boost_variant", "Compile with variant support") orelse defaults.boost_variant,
				.boost_variant2 = b.option(bool, "boost_variant2", "Compile with variant2 support") orelse defaults.boost_variant2,
				.boost_vmd = b.option(bool, "boost_vmd", "Compile with vmd support") orelse defaults.boost_vmd,
				.boost_wave = b.option(bool, "boost_wave", "Compile with wave support") orelse defaults.boost_wave,
				.boost_winapi = b.option(bool, "boost_winapi", "Compile with winapi support") orelse defaults.boost_winapi,
				.boost_xpressive = b.option(bool, "boost_xpressive", "Compile with xpressive support") orelse defaults.boost_xpressive,
				.boost_yap = b.option(bool, "boost_yap", "Compile with yap support") orelse defaults.boost_yap,
                
            };
        }
    };
    