const std = @import("std");

pub const boost_version: std.SemanticVersion = .{ .major = 1, .minor = 86, .patch = 0 };
pub const cxxFlags: []const []const u8 = &.{
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Wformat",
};
pub const comp_required_libs = [_][] const u8 {
    "chrono",
    "context",
    "filesystem",
    "graph_parallel",
    "io_streams",
    "locale",
    "log",
    "mpi",
    "program_options",
    "python",
    "regex",
    "serialization",
    "thread",
    "timer",
    "wave"
};
pub const boost_libs = [_][]const u8{
    "algorithm",
    "align",
    "any",
    "array",
    "asio", // stackless coroutine (stl) and stackful coroutine (need boost.context)
    "assert",
    "atomic",
    "beast", // need boost.asio
    "bimap",
    "bind",
    "callable_traits",
    "charconv",
    "chrono",
    "circular_buffer",
    "cobalt", // need boost.asio (no header-only)
    "compat",
    "compute", // need OpenCL
    "concept_check",
    "config", 
    "container", // no header-only
    "container_hash",
    "context", // cpp + asm (no header-only)
    "conversion",
    "core",
    "coroutine2", // need boost.context
    "crc",
    "date_time",
    "describe",
    "detail",
    "endian",
    "exception",
    "fiber", // need boost.context (no header-only)
    "filesystem", // no header-only
    "format",
    "function",
    "function_types",
    "functional",
    "fusion",
    "geometry",
    "gil",
    "graph",
    "hana",
    "heap",
    "hof",
    "integer",
    "interprocess",
    "interval",
    "intrusive",
    "io",
    "iostreams",
    "iterator",
    "json", // (no header-only)
    "leaf",
    "lexical_cast",
    "local_function",
    "locale",
    "lockfree",
    "log",
    "logic",
    "math",
    "move",
    "mp11",
    "mpl",
    "msm",
    "multi_array",
    "multi_index",
    "mysql",
    "nowide",
    "numeric_conversion",
    "odeint",
    "optional",
    "outcome",
    "parameter",
    "pfr",
    "phoenix",
    "pool",
    "predef",
    "preprocessor",
    "process",
    "program_options", // no header-only
    "property_map",
    "property_map_parallel",
    "property_tree",
    "proto",
    "python",
    "random",
    "range",
    "redis",
    "regex",
    "safe_numerics",
    "scope",
    "serialization", // no header-only
    "signals2",
    "smart_ptr",
    "sort",
    "spirit",
    "stacktrace",
    "static_assert",
    "static_string",
    "system",
    "throw_exception",
    "timer",
    "tokenizer",
    "tuple",
    "type_erasure",
    "type_index",
    "type_traits",
    "typeof",
    "ublas",
    "units",
    "unordered",
    "url",
    "utility",
    "uuid",
    "variant",
    "variant2",
    "wave",
    "winapi"
};
